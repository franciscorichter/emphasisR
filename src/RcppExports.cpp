// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// check_n_from_time
int check_n_from_time(double bt, NumericMatrix input_tree, double soc);
RcppExport SEXP _emphasis_check_n_from_time(SEXP btSEXP, SEXP input_treeSEXP, SEXP socSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bt(btSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type input_tree(input_treeSEXP);
    Rcpp::traits::input_parameter< double >::type soc(socSEXP);
    rcpp_result_gen = Rcpp::wrap(check_n_from_time(bt, input_tree, soc));
    return rcpp_result_gen;
END_RCPP
}
// augment_cpp2
NumericMatrix augment_cpp2(NumericVector brts_in, NumericVector pars, std::string model, int soc);
RcppExport SEXP _emphasis_augment_cpp2(SEXP brts_inSEXP, SEXP parsSEXP, SEXP modelSEXP, SEXP socSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type brts_in(brts_inSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type soc(socSEXP);
    rcpp_result_gen = Rcpp::wrap(augment_cpp2(brts_in, pars, model, soc));
    return rcpp_result_gen;
END_RCPP
}
// loglik_tree_cpp
double loglik_tree_cpp(std::string model, NumericVector input_pars, NumericMatrix input_tree);
RcppExport SEXP _emphasis_loglik_tree_cpp(SEXP modelSEXP, SEXP input_parsSEXP, SEXP input_treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type input_pars(input_parsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type input_tree(input_treeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_tree_cpp(model, input_pars, input_tree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_emphasis_check_n_from_time", (DL_FUNC) &_emphasis_check_n_from_time, 3},
    {"_emphasis_augment_cpp2", (DL_FUNC) &_emphasis_augment_cpp2, 4},
    {"_emphasis_loglik_tree_cpp", (DL_FUNC) &_emphasis_loglik_tree_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_emphasis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
